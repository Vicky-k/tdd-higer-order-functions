/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;


import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.closeTo;
import static org.hamcrest.Matchers.is;

import static org.hamcrest.Matchers.contains;
import static org.junit.jupiter.api.Assertions.assertFalse;

public class LibraryTest {


    /*@Test
    void showFoxesforNullCheckReturnNull() {

        final List<String> words = Collections.singletonList(null);

        Library library = new Library();

        final List<String> actual = library.slowFoxes(words);

        assertThat(actual, contains((String)null));
    }

    @Test
    void showFoxesforEmptyCheckReturnEmpty() {

        final List<String> words = Arrays.asList();

        Library library = new Library();

        final List<String> actual = library.slowFoxes(words);

        assertThat(actual.isEmpty(), is(true));
    }


    @Test
    void checkForOneThatReturnsRedFox() {
        final List<String> words = Arrays.asList("Red Fox");

        Library library = new Library();

        final List<String> actual = library.slowFoxes(words);


        assertThat(actual, contains("Red Fox"));
    }


    @Test
    void checkForOneThatReturnsSwiftFox() {
        final List<String> words = Arrays.asList("Swift Fox");

        Library library = new Library();

        final List<String> actual = library.slowFoxes(words);

        assertThat(actual.isEmpty(), is(true));
    }

    @Test
    void checkForFiveThatContainsSwiftFoxStandardList() {
        final List<String> words = Arrays.asList("Red Fox", "Arctic Fox", "Fennec Fox", "Kit Fox", "Swift Fox");

        Library library = new Library();

        final List<String> actual = library.slowFoxes(words);

        assertThat(actual.contains("Swift Fox"), is(false));
    }

    @Test
    void checkForFiveThatContainsSwiftFoxUnStandardList() {
        final List<String> words = Arrays.asList("xxxxx", "y", "skjdhkjdf", "Kit Fox", "Kit Fox", "Swift Fox");

        Library library = new Library();

        final List<String> actual = library.slowFoxes(words);

        assertThat(actual.contains("Swift Fox"), is(false));
        assertThat(actual.contains("xxxxx"), is(true));
    }*/

    /*@Test
    void adultforNullCheckReturnEmpty()
    {
        final List<Person> persons = Collections.singletonList(null);

        Library library = new Library();

        final List<Person> actual = library.adult(persons);

        assertThat(actual.isEmpty(), is(true));
    }

    @Test
    void adultForOneWithAdult() {
        Person person = new Person("abc", "xyz", 24);
        final List<Person> persons = Arrays.asList(person);

        Library library = new Library();

        final List<Person> actual = library.adult(persons);

        assertThat(actual.contains(person), is(true));

    }

    @Test
    void adultForOneWithNoAdult() {
        Person person = new Person("abc", "xyz", 16);
        final List<Person> persons = Arrays.asList(person);

        Library library = new Library();

        final List<Person> actual = library.adult(persons);

        assertThat(actual.contains(person), is(false));

    }

    @Test
    void adultForFourWithAndWithoutAdults() {
        Person person1 = new Person("abc", "xyz", 16);
        Person person2 = new Person("abc", "xyz", 24);
        Person person3= new Person("abc", "xyz", 13);
        Person person4 = new Person("abc", "xyz", 50);
        final List<Person> persons = Arrays.asList(person1, person2, person3, person4);

        Library library = new Library();

        final List<Person> actual = library.adult(persons);

        assertThat(actual.contains(person1), is(false));
        assertThat(actual.contains(person2), is(true));
        assertThat(actual.contains(person3), is(false));
        assertThat(actual.contains(person4), is(true));

    }*/

    @Test
    void checkAgeClosureForNullReturnsEmpty()   {
        final List<Person> persons = Collections.singletonList(null);

        Library library = new Library();

        final List<Person> actual = library.genericAgeFilter(Library.drinkingAge, persons);

        assertThat(actual.isEmpty(), is(true));
    }

    @Test
    void checkAgeClosureForOneWithAdultReturnsAdult()   {
        Person person = new Person("abc", "xyz", 23);
        final List<Person> persons = Arrays.asList(person);

        Library library = new Library();

        final List<Person> actual = library.genericAgeFilter(Library.drinkingAge, persons);

        assertThat(actual.contains(person), is(true));
    }













}